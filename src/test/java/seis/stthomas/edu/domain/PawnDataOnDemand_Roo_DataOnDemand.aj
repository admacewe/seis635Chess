// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package seis.stthomas.edu.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import seis.stthomas.edu.domain.Board;
import seis.stthomas.edu.domain.BoardDataOnDemand;
import seis.stthomas.edu.domain.Pawn;
import seis.stthomas.edu.domain.PawnDataOnDemand;

privileged aspect PawnDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PawnDataOnDemand: @Component;
    
    private Random PawnDataOnDemand.rnd = new SecureRandom();
    
    private List<Pawn> PawnDataOnDemand.data;
    
    @Autowired
    private BoardDataOnDemand PawnDataOnDemand.boardDataOnDemand;
    
    public Pawn PawnDataOnDemand.getNewTransientPawn(int index) {
        Pawn obj = new Pawn();
        setBoard(obj, index);
        setHasMoved(obj, index);
        setIsWhite(obj, index);
        setPieceValue(obj, index);
        return obj;
    }
    
    public void PawnDataOnDemand.setBoard(Pawn obj, int index) {
        Board board = boardDataOnDemand.getRandomBoard();
        obj.setBoard(board);
    }
    
    public void PawnDataOnDemand.setHasMoved(Pawn obj, int index) {
        Boolean hasMoved = true;
        obj.setHasMoved(hasMoved);
    }
    
    public void PawnDataOnDemand.setIsWhite(Pawn obj, int index) {
        Boolean isWhite = true;
        obj.setIsWhite(isWhite);
    }
    
    public void PawnDataOnDemand.setPieceValue(Pawn obj, int index) {
        int pieceValue = index;
        obj.setPieceValue(pieceValue);
    }
    
    public Pawn PawnDataOnDemand.getSpecificPawn(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Pawn obj = data.get(index);
        Long id = obj.getId();
        return Pawn.findPawn(id);
    }
    
    public Pawn PawnDataOnDemand.getRandomPawn() {
        init();
        Pawn obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Pawn.findPawn(id);
    }
    
    public boolean PawnDataOnDemand.modifyPawn(Pawn obj) {
        return false;
    }
    
    public void PawnDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Pawn.findPawnEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Pawn' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Pawn>();
        for (int i = 0; i < 10; i++) {
            Pawn obj = getNewTransientPawn(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
