// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package seis.stthomas.edu.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;
import seis.stthomas.edu.domain.Piece;

privileged aspect Piece_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Piece.entityManager;
    
    public static final EntityManager Piece.entityManager() {
        EntityManager em = new Piece() {
            public java.lang.String getMoveStrategy() {
                throw new UnsupportedOperationException();
            }
            public java.util.List<org.apache.commons.lang3.tuple.ImmutablePair<java.lang.Integer, java.lang.Integer>> getAvailableMoves() {
                throw new UnsupportedOperationException();
            }
        }.entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Piece.countPieces() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Piece o", Long.class).getSingleResult();
    }
    
    public static List<Piece> Piece.findAllPieces() {
        return entityManager().createQuery("SELECT o FROM Piece o", Piece.class).getResultList();
    }
    
    public static Piece Piece.findPiece(Long id) {
        if (id == null) return null;
        return entityManager().find(Piece.class, id);
    }
    
    public static List<Piece> Piece.findPieceEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Piece o", Piece.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Piece.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Piece.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Piece attached = Piece.findPiece(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Piece.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Piece.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Piece Piece.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Piece merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
